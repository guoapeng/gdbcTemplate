// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// RowMapper is an autogenerated mock type for the RowMapper type
type RowMapper struct {
	mock.Mock
}

type RowMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *RowMapper) EXPECT() *RowMapper_Expecter {
	return &RowMapper_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: row
func (_m *RowMapper) Execute(row *sql.Row) interface{} {
	ret := _m.Called(row)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*sql.Row) interface{}); ok {
		r0 = rf(row)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// RowMapper_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RowMapper_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - row *sql.Row
func (_e *RowMapper_Expecter) Execute(row interface{}) *RowMapper_Execute_Call {
	return &RowMapper_Execute_Call{Call: _e.mock.On("Execute", row)}
}

func (_c *RowMapper_Execute_Call) Run(run func(row *sql.Row)) *RowMapper_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Row))
	})
	return _c
}

func (_c *RowMapper_Execute_Call) Return(_a0 interface{}) *RowMapper_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RowMapper_Execute_Call) RunAndReturn(run func(*sql.Row) interface{}) *RowMapper_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRowMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewRowMapper creates a new instance of RowMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRowMapper(t mockConstructorTestingTNewRowMapper) *RowMapper {
	mock := &RowMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
