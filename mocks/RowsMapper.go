// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// RowsMapper is an autogenerated mock type for the RowsMapper type
type RowsMapper struct {
	mock.Mock
}

type RowsMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *RowsMapper) EXPECT() *RowsMapper_Expecter {
	return &RowsMapper_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: rows
func (_m *RowsMapper) Execute(rows *sql.Rows) interface{} {
	ret := _m.Called(rows)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*sql.Rows) interface{}); ok {
		r0 = rf(rows)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// RowsMapper_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RowsMapper_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - rows *sql.Rows
func (_e *RowsMapper_Expecter) Execute(rows interface{}) *RowsMapper_Execute_Call {
	return &RowsMapper_Execute_Call{Call: _e.mock.On("Execute", rows)}
}

func (_c *RowsMapper_Execute_Call) Run(run func(rows *sql.Rows)) *RowsMapper_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Rows))
	})
	return _c
}

func (_c *RowsMapper_Execute_Call) Return(_a0 interface{}) *RowsMapper_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RowsMapper_Execute_Call) RunAndReturn(run func(*sql.Rows) interface{}) *RowsMapper_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRowsMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewRowsMapper creates a new instance of RowsMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRowsMapper(t mockConstructorTestingTNewRowsMapper) *RowsMapper {
	mock := &RowsMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
