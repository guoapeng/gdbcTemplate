// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DataSource is an autogenerated mock type for the DataSource type
type DataSource struct {
	mock.Mock
}

type DataSource_Expecter struct {
	mock *mock.Mock
}

func (_m *DataSource) EXPECT() *DataSource_Expecter {
	return &DataSource_Expecter{mock: &_m.Mock}
}

// FormatDsn provides a mock function with given fields:
func (_m *DataSource) FormatDsn() (string, string) {
	ret := _m.Called()

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// DataSource_FormatDsn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatDsn'
type DataSource_FormatDsn_Call struct {
	*mock.Call
}

// FormatDsn is a helper method to define mock.On call
func (_e *DataSource_Expecter) FormatDsn() *DataSource_FormatDsn_Call {
	return &DataSource_FormatDsn_Call{Call: _e.mock.On("FormatDsn")}
}

func (_c *DataSource_FormatDsn_Call) Run(run func()) *DataSource_FormatDsn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataSource_FormatDsn_Call) Return(_a0 string, _a1 string) *DataSource_FormatDsn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataSource_FormatDsn_Call) RunAndReturn(run func() (string, string)) *DataSource_FormatDsn_Call {
	_c.Call.Return(run)
	return _c
}

// GetDriverName provides a mock function with given fields:
func (_m *DataSource) GetDriverName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DataSource_GetDriverName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDriverName'
type DataSource_GetDriverName_Call struct {
	*mock.Call
}

// GetDriverName is a helper method to define mock.On call
func (_e *DataSource_Expecter) GetDriverName() *DataSource_GetDriverName_Call {
	return &DataSource_GetDriverName_Call{Call: _e.mock.On("GetDriverName")}
}

func (_c *DataSource_GetDriverName_Call) Run(run func()) *DataSource_GetDriverName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataSource_GetDriverName_Call) Return(_a0 string) *DataSource_GetDriverName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataSource_GetDriverName_Call) RunAndReturn(run func() string) *DataSource_GetDriverName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDataSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataSource creates a new instance of DataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataSource(t mockConstructorTestingTNewDataSource) *DataSource {
	mock := &DataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
