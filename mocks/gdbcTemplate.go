// Code generated by MockGen. DO NOT EDIT.
// Source: GdbcTemplate.go

// Package gdbc_mock is a generated GoMock package.
package mocks

import (
	"database/sql"
	"github.com/golang/mock/gomock"
	"github.com/guoapeng/gdbcTemplate/mapper"
	"reflect"
)

// MockGdbcTemplate is a mock of GdbcTemplate interface
type MockGdbcTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockGdbcTemplateMockRecorder
}

// MockGdbcTemplateMockRecorder is the mock recorder for MockGdbcTemplate
type MockGdbcTemplateMockRecorder struct {
	mock *MockGdbcTemplate
}

// NewMockGdbcTemplate creates a new mock instance
func NewMockGdbcTemplate(ctrl *gomock.Controller) *MockGdbcTemplate {
	mock := &MockGdbcTemplate{ctrl: ctrl}
	mock.recorder = &MockGdbcTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGdbcTemplate) EXPECT() *MockGdbcTemplateMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockGdbcTemplate) Insert(sqlstr string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sqlstr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockGdbcTemplateMockRecorder) Insert(sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGdbcTemplate)(nil).Insert), varargs...)
}

// QueryForArray mocks base method
func (m *MockGdbcTemplate) QueryRows(sql string, rowMapper mapper.RowsMapper, args ...interface{}) []interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql, rowMapper}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryForArray", varargs...)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// QueryForArray indicates an expected call of QueryForArray
func (mr *MockGdbcTemplateMockRecorder) QueryRows(sql, rowMapper interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql, rowMapper}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryForArray", reflect.TypeOf((*MockGdbcTemplate)(nil).QueryRows), varargs...)
}

// QueryRow mocks base method
func (m *MockGdbcTemplate) QueryRow(sql string, args ...interface{}) func(...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(func(...interface{}) error)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockGdbcTemplateMockRecorder) QueryRow(sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockGdbcTemplate)(nil).QueryRow), varargs...)
}
