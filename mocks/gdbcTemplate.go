// Code generated by MockGen. DO NOT EDIT.
// Source: template/gdbcTemplate.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mapper "github.com/guoapeng/gdbcTemplate/mapper"
)

// MockGdbcTemplate is a mock of GdbcTemplate interface.
type MockGdbcTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockGdbcTemplateMockRecorder
}

// MockGdbcTemplateMockRecorder is the mock recorder for MockGdbcTemplate.
type MockGdbcTemplateMockRecorder struct {
	mock *MockGdbcTemplate
}

// NewMockGdbcTemplate creates a new mock instance.
func NewMockGdbcTemplate(ctrl *gomock.Controller) *MockGdbcTemplate {
	mock := &MockGdbcTemplate{ctrl: ctrl}
	mock.recorder = &MockGdbcTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGdbcTemplate) EXPECT() *MockGdbcTemplateMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGdbcTemplate) Execute(sqlstr string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sqlstr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGdbcTemplateMockRecorder) Execute(sqlstr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sqlstr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGdbcTemplate)(nil).Execute), varargs...)
}

// Insert mocks base method.
func (m *MockGdbcTemplate) Insert(sqlstr string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sqlstr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockGdbcTemplateMockRecorder) Insert(sqlstr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sqlstr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGdbcTemplate)(nil).Insert), varargs...)
}

// QueryForArray mocks base method.
func (m *MockGdbcTemplate) QueryForArray(sqlstr string, args ...interface{}) mapper.RowsConvertor {
	m.ctrl.T.Helper()
	varargs := []interface{}{sqlstr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryForArray", varargs...)
	ret0, _ := ret[0].(mapper.RowsConvertor)
	return ret0
}

// QueryForArray indicates an expected call of QueryForArray.
func (mr *MockGdbcTemplateMockRecorder) QueryForArray(sqlstr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sqlstr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryForArray", reflect.TypeOf((*MockGdbcTemplate)(nil).QueryForArray), varargs...)
}

// QueryRow mocks base method.
func (m *MockGdbcTemplate) QueryRow(sqlstr string, args ...interface{}) mapper.RowConvertor {
	m.ctrl.T.Helper()
	varargs := []interface{}{sqlstr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(mapper.RowConvertor)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockGdbcTemplateMockRecorder) QueryRow(sqlstr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sqlstr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockGdbcTemplate)(nil).QueryRow), varargs...)
}

// Update mocks base method.
func (m *MockGdbcTemplate) Update(sqlstr string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sqlstr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGdbcTemplateMockRecorder) Update(sqlstr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sqlstr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGdbcTemplate)(nil).Update), varargs...)
}
