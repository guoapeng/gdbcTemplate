// Code generated by MockGen. DO NOT EDIT.
// Source: datasource/connManager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnManager is a mock of ConnManager interface.
type MockConnManager struct {
	ctrl     *gomock.Controller
	recorder *MockConnManagerMockRecorder
}

// MockConnManagerMockRecorder is the mock recorder for MockConnManager.
type MockConnManagerMockRecorder struct {
	mock *MockConnManager
}

// NewMockConnManager creates a new mock instance.
func NewMockConnManager(ctrl *gomock.Controller) *MockConnManager {
	mock := &MockConnManager{ctrl: ctrl}
	mock.recorder = &MockConnManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnManager) EXPECT() *MockConnManagerMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockConnManager) Open(driverName, dataSourceName string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", driverName, dataSourceName)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockConnManagerMockRecorder) Open(driverName, dataSourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockConnManager)(nil).Open), driverName, dataSourceName)
}
