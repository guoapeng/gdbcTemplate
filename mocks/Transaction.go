// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

type Transaction_Expecter struct {
	mock *mock.Mock
}

func (_m *Transaction) EXPECT() *Transaction_Expecter {
	return &Transaction_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields:
func (_m *Transaction) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Transaction_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *Transaction_Expecter) Commit() *Transaction_Commit_Call {
	return &Transaction_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *Transaction_Commit_Call) Run(run func()) *Transaction_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transaction_Commit_Call) Return(_a0 error) *Transaction_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transaction_Commit_Call) RunAndReturn(run func() error) *Transaction_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: sqlstr, args
func (_m *Transaction) Execute(sqlstr string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, sqlstr)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(sqlstr, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(sqlstr, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(sqlstr, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Transaction_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - sqlstr string
//   - args ...interface{}
func (_e *Transaction_Expecter) Execute(sqlstr interface{}, args ...interface{}) *Transaction_Execute_Call {
	return &Transaction_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{sqlstr}, args...)...)}
}

func (_c *Transaction_Execute_Call) Run(run func(sqlstr string, args ...interface{})) *Transaction_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Transaction_Execute_Call) Return(_a0 sql.Result, _a1 error) *Transaction_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transaction_Execute_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *Transaction_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: sqlstr, args
func (_m *Transaction) Insert(sqlstr string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, sqlstr)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(sqlstr, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(sqlstr, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(sqlstr, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Transaction_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - sqlstr string
//   - args ...interface{}
func (_e *Transaction_Expecter) Insert(sqlstr interface{}, args ...interface{}) *Transaction_Insert_Call {
	return &Transaction_Insert_Call{Call: _e.mock.On("Insert",
		append([]interface{}{sqlstr}, args...)...)}
}

func (_c *Transaction_Insert_Call) Run(run func(sqlstr string, args ...interface{})) *Transaction_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Transaction_Insert_Call) Return(_a0 sql.Result, _a1 error) *Transaction_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transaction_Insert_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *Transaction_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: sqlstr, args
func (_m *Transaction) Update(sqlstr string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, sqlstr)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(sqlstr, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(sqlstr, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(sqlstr, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Transaction_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - sqlstr string
//   - args ...interface{}
func (_e *Transaction_Expecter) Update(sqlstr interface{}, args ...interface{}) *Transaction_Update_Call {
	return &Transaction_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{sqlstr}, args...)...)}
}

func (_c *Transaction_Update_Call) Run(run func(sqlstr string, args ...interface{})) *Transaction_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Transaction_Update_Call) Return(_a0 sql.Result, _a1 error) *Transaction_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transaction_Update_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *Transaction_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTransaction interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransaction(t mockConstructorTestingTNewTransaction) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
