// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// BeanPropertyRowMapper is an autogenerated mock type for the BeanPropertyRowMapper type
type BeanPropertyRowMapper struct {
	mock.Mock
}

type BeanPropertyRowMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *BeanPropertyRowMapper) EXPECT() *BeanPropertyRowMapper_Expecter {
	return &BeanPropertyRowMapper_Expecter{mock: &_m.Mock}
}

// RowMapper provides a mock function with given fields: row
func (_m *BeanPropertyRowMapper) RowMapper(row *sql.Row) interface{} {
	ret := _m.Called(row)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*sql.Row) interface{}); ok {
		r0 = rf(row)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// BeanPropertyRowMapper_RowMapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RowMapper'
type BeanPropertyRowMapper_RowMapper_Call struct {
	*mock.Call
}

// RowMapper is a helper method to define mock.On call
//   - row *sql.Row
func (_e *BeanPropertyRowMapper_Expecter) RowMapper(row interface{}) *BeanPropertyRowMapper_RowMapper_Call {
	return &BeanPropertyRowMapper_RowMapper_Call{Call: _e.mock.On("RowMapper", row)}
}

func (_c *BeanPropertyRowMapper_RowMapper_Call) Run(run func(row *sql.Row)) *BeanPropertyRowMapper_RowMapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Row))
	})
	return _c
}

func (_c *BeanPropertyRowMapper_RowMapper_Call) Return(_a0 interface{}) *BeanPropertyRowMapper_RowMapper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeanPropertyRowMapper_RowMapper_Call) RunAndReturn(run func(*sql.Row) interface{}) *BeanPropertyRowMapper_RowMapper_Call {
	_c.Call.Return(run)
	return _c
}

// RowsMapper provides a mock function with given fields: rows
func (_m *BeanPropertyRowMapper) RowsMapper(rows *sql.Rows) interface{} {
	ret := _m.Called(rows)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*sql.Rows) interface{}); ok {
		r0 = rf(rows)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// BeanPropertyRowMapper_RowsMapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RowsMapper'
type BeanPropertyRowMapper_RowsMapper_Call struct {
	*mock.Call
}

// RowsMapper is a helper method to define mock.On call
//   - rows *sql.Rows
func (_e *BeanPropertyRowMapper_Expecter) RowsMapper(rows interface{}) *BeanPropertyRowMapper_RowsMapper_Call {
	return &BeanPropertyRowMapper_RowsMapper_Call{Call: _e.mock.On("RowsMapper", rows)}
}

func (_c *BeanPropertyRowMapper_RowsMapper_Call) Run(run func(rows *sql.Rows)) *BeanPropertyRowMapper_RowsMapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Rows))
	})
	return _c
}

func (_c *BeanPropertyRowMapper_RowsMapper_Call) Return(_a0 interface{}) *BeanPropertyRowMapper_RowsMapper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeanPropertyRowMapper_RowsMapper_Call) RunAndReturn(run func(*sql.Rows) interface{}) *BeanPropertyRowMapper_RowsMapper_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBeanPropertyRowMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewBeanPropertyRowMapper creates a new instance of BeanPropertyRowMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBeanPropertyRowMapper(t mockConstructorTestingTNewBeanPropertyRowMapper) *BeanPropertyRowMapper {
	mock := &BeanPropertyRowMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
