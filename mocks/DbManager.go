// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// DbManager is an autogenerated mock type for the DbManager type
type DbManager struct {
	mock.Mock
}

type DbManager_Expecter struct {
	mock *mock.Mock
}

func (_m *DbManager) EXPECT() *DbManager_Expecter {
	return &DbManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DbManager) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DbManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DbManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DbManager_Expecter) Close() *DbManager_Close_Call {
	return &DbManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DbManager_Close_Call) Run(run func()) *DbManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DbManager_Close_Call) Return(_a0 error) *DbManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DbManager_Close_Call) RunAndReturn(run func() error) *DbManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetDb provides a mock function with given fields:
func (_m *DbManager) GetDb() (*sql.DB, error) {
	ret := _m.Called()

	var r0 *sql.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbManager_GetDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDb'
type DbManager_GetDb_Call struct {
	*mock.Call
}

// GetDb is a helper method to define mock.On call
func (_e *DbManager_Expecter) GetDb() *DbManager_GetDb_Call {
	return &DbManager_GetDb_Call{Call: _e.mock.On("GetDb")}
}

func (_c *DbManager_GetDb_Call) Run(run func()) *DbManager_GetDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DbManager_GetDb_Call) Return(_a0 *sql.DB, _a1 error) *DbManager_GetDb_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DbManager_GetDb_Call) RunAndReturn(run func() (*sql.DB, error)) *DbManager_GetDb_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDbManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewDbManager creates a new instance of DbManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDbManager(t mockConstructorTestingTNewDbManager) *DbManager {
	mock := &DbManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
